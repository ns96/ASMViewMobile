/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
package userclasses;

import ca.weblite.codename1.json.JSONException;
import ca.weblite.codename1.json.JSONObject;
import com.codename1.bluetoothle.Bluetooth;
import generated.StateMachineBase;
import com.codename1.ui.*;
import com.codename1.ui.events.*;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.list.ListModel;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.Resources;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {

    private Bluetooth bt;
    private Map devices = new HashMap();

    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }

    /**
     * this method should be used to initialize variables instead of the
     * constructor/class scope to avoid race conditions
     */
    protected void initVars(Resources res) {
        bt = new Bluetooth();
    }

    @Override
    protected void beforeMain(Form f) {
        super.beforeMain(f); //To change body of generated methods, choose Tools | Templates.
        
        // update the picker
        Picker sp = findSyncPicker(f);
        sp.setStrings("Sync Every 10 min", "Sync Every 15 min", "Sync Every 30 min", "Sync Every 60 min");
        sp.setSelectedStringIndex(1);
    }
    
    @Override
    protected void onMain_ScanButtonAction(Component c, ActionEvent event) {
        try {
            bt.initialize(true, false, "bluetoothleplugin");
            scanBluetoothDevices();
            
            if(!devices.isEmpty()) {
                findLocationTextField().setText("BT Initialized ***");
            } else {
                findLocationTextField().setText("NO BT Devices found ***");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            findLocationTextField().setText("BT NOT Initialized ...");
        }
    }
    
    /**
     * Scan for bluetooth devices
     * @throws IOException 
     */
    private void scanBluetoothDevices() throws IOException {
        bt.startScan(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    JSONObject res = (JSONObject) evt.getSource();
                    System.out.println("response " + res);

                    if (res.getString("status").equals("scanResult")) {
                        //if this is a new device add it
                        if (!devices.containsKey(res.getString("address"))) {
                            devices.put(res.getString("address"), res);
                            updateAddressPicker();
                        }
                    }
                } catch (JSONException ex) {
                    ex.printStackTrace();
                }
            }
        }, null, true, Bluetooth.SCAN_MODE_LOW_POWER, Bluetooth.MATCH_MODE_STICKY,
                Bluetooth.MATCH_NUM_MAX_ADVERTISEMENT, Bluetooth.CALLBACK_TYPE_ALL_MATCHES);
    }

    /**
     * Update the address combo boxes
     */
    private void updateAddressPicker() throws JSONException {
        Picker addressPicker = findAddressPicker();
        ArrayList<String> al = new ArrayList<>();
        
        Set keys = devices.keySet();
        int count = 0;
        for (Iterator iterator = keys.iterator(); iterator.hasNext();) {
            String address = (String) iterator.next();
            JSONObject obj = (JSONObject) devices.get(address);
            String name = obj.getString("name");
            al.add(count + " -- " + address);
            
            count++;
        }
        
        String[] addresses = al.toArray(new String[al.size()]);
        addressPicker.setStrings(addresses);
    }

    @Override
    protected void onMain_AddressPickerAction(Component c, ActionEvent event) {
        
    
    }
}
